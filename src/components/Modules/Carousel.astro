---
import SanityPicture, { setSanityPictureDefaults } from "astro-sanity-picture";
import type { Artist, PictureTitled } from "@/sanity";
import { imageBuilder } from "@/utils/imageBuilder";
import { resolveReference } from "@/utils/resolveLinks";

interface Props {
  id: string;
  value: NonNullable<PictureTitled[]>;
}

setSanityPictureDefaults({ imageUrlBuilder: imageBuilder });

const { id: propsId, value } = Astro.props;
const id = `c${propsId}`;
---

<section id={id} class="Carousel" aria-label="Carousel">
  <section class="Images" aria-live="polite">
    {
      value.map((picture, i) => {
        const img = resolveReference(picture.asset);
        return (
          <figure
            class:list={i == 0 ? "present" : []}
            id={`${id}-${i + 1}`}
            role="tabpanel"
          >
            <SanityPicture
              class="Picture"
              src={img}
              sizes="100vw, (min-width: 768px) 767px"
              img={{
                alt: picture.alt || picture.caption || "Untitled image.",
                style: {
                  width: "100%",
                  height: "100%",
                  objectFit: "contain",
                  objectPosition: "center bottom",
                },
              }}
              style={{
                backgroundSize: "contain",
                backgroundPosition: "center bottom",
                backgroundRepeat: "no-repeat",
              }}
            />
            <figcaption>{picture.caption}</figcaption>
          </figure>
        );
      })
    }
  </section>
  {
    value.length > 1 && (
      <nav role="tablist">
        {value.map((_, i) => {
          return (
            <button
              role="tab"
              aria-label={`Picture ${i + 1} of ${value.length}`}
              aria-selected={i == 0}
              aria-controls={`${id}-${i + 1}`}
            />
          );
        })}
      </nav>
    )
  }
</section>

<script define:vars={{ id }}>
  let shownI = 0;
  const carousel = document.querySelector(`#${id}`);
  const images = carousel.querySelectorAll("figure");
  const buttons = carousel.querySelectorAll("button");
  function setImage(i, withFocus) {
    images[shownI].classList.remove("present");
    buttons[shownI].removeAttribute("aria-selected");
    shownI = (i + images.length) % images.length;
    images[shownI].classList.add("present");
    buttons[shownI].setAttribute("aria-selected", "true");
    if (withFocus) buttons[shownI].focus();
  }

  // attach listeners
  if (images.length > 1) {
    let autoPlay = true;
    images.forEach((image) => {
      image.querySelector("picture").onclick = () => {
        autoPlay = false;
        setImage(shownI + 1);
      };
    });
    buttons.forEach((button, i) => {
      button.onclick = () => {
        autoPlay = false;
        setImage(i);
      };
      button.onkeydown = (e) => {
        autoPlay = false;
        if (e.key == "ArrowRight") {
          setImage(i + 1, true);
        } else if (e.key == "ArrowLeft") {
          setImage(i - 1, true);
        }
      };
    });

    // auto-move through until interacted with
    function nextAutoPlay() {
      if (!autoPlay) return;
      setImage(shownI + 1);
      window.setTimeout(nextAutoPlay, 4000);
    }
    setTimeout(nextAutoPlay, 4000);
  }
</script>

<style lang="scss">
  .Carousel {
    position: relative;
    width: 100%;
    margin: 2em 0;
    display: grid;
    grid-template-columns: 1fr auto;
    grid-template-rows: 1fr auto;
    flex-direction: row;
  }

  section {
    display: grid;
    grid-row: span 2;
    grid-template-rows: subgrid;
    width: 100%;
  }

  figure {
    grid-area: pic;
    display: grid;
    grid-row: 1 / -1;
    grid-template-rows: subgrid;
    flex-direction: column;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    pointer-events: none;

    &.present {
      opacity: 1;
      pointer-events: all;
    }
  }

  figcaption {
    margin-top: 1em;
    grid-row-start: 2;
  }

  .Picture {
    grid-row-start: 1;
    width: 100%;
    aspect-ratio: 4/3;
    cursor: pointer;
    overflow: hidden;

    & img {
      object-fit: contain;
      object-position: center;
    }
  }

  nav {
    grid-row: 1;
    grid-column: 2;
    align-self: center;
    margin-left: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;

    @media screen and (min-width: 800px) {
      position: absolute;
      left: 100%;
    }
  }

  button {
    border-radius: 100%;
    background-color: var(--clr-fg);
    width: 0.75rem;
    height: 0.75rem;
    opacity: 0.2;

    &[aria-selected="true"] {
      opacity: 1;
    }
  }
</style>
