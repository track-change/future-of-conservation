---
import type { Tag } from "@/sanity";
interface Props {
  tags?: (Tag & { titleLang?: string })[];
  ariaControls?: string;
}

const { ariaControls } = Astro.props;

const orderedTags = Object.values(
  Astro.props.tags?.reduce(
    (acc, { title, titleLang, slug }) => {
      if (!acc[slug.current])
        acc[slug.current] = { title, titleLang, slug, cnt: 0 };
      else acc[slug.current].cnt += 1;
      return acc;
    },
    {} as {
      [key: string]: Pick<Tag, "title" | "slug"> & {
        titleLang?: string;
        cnt: number;
      };
    },
  ) || {},
).sort(({ cnt: a }, { cnt: b }) => b - a);
---

<form
  id="filter-control"
  class="FilterControl"
  aria-label="Filter page contents by tag"
  aria-controls={ariaControls}
>
  <div class="FilterControl_head">
    <h1 class="header-reset" id="filter-head"><small>Explore by tag</small></h1>
    <button
      type="button"
      id="filter-control-clear"
      class="FilterControl_clear"
      aria-label="Clear the filter"
      tabindex="0"
    >
      Clear
    </button>
  </div>
  <div class="FilterControl_fields">
    <div class="FilterControl_button">
      <button
        id="filter-scroll-left"
        aria-label="Scroll the tag filter to the left"
        type="button"
        tabindex="0"
        disabled
      >
        {"<"}
      </button>
    </div>
    <div class="FilterControl_button">
      <button
        id="filter-scroll-right"
        aria-label="Scroll the tag filter to the right"
        type="button"
        tabindex="0"
        disabled
      >
        {">"}
      </button>
    </div>
    <div class="FilterControl_inner">
      {
        orderedTags.map(({ title, titleLang, slug: { current: slug } }) => (
          <>
            <input
              type="checkbox"
              class="FilterControl_input"
              id={`filter-${slug}`}
              value={`${slug}`}
            />
            <label for={`filter-${slug}`} lang={titleLang}>
              {title}
            </label>
          </>
        ))
      }
    </div>
  </div>
</form>

<slot />

<script>
  const clearAll = document.querySelector<HTMLButtonElement>(
    "#filter-control-clear",
  );
  const inputs = document.querySelectorAll<HTMLInputElement>(
    ".FilterControl_input",
  );
  const targets = document.querySelectorAll<HTMLLIElement>(".filter-target");

  // Filter update listener
  function recalculateFilter() {
    const newFilter = new Set();
    inputs.forEach((node) => {
      if (node.checked) newFilter.add(node.getAttribute("value"));
    });
    if (clearAll) clearAll.disabled = newFilter.size === 0;
    if (newFilter.size === 0) {
      targets.forEach((targetNode) => {
        targetNode.style.display = "";
      });
      return;
    }
    targets.forEach((targetNode) => {
      const tags = targetNode.getAttribute("data-tags");
      if (!tags) return;
      const tagArray: string[] = JSON.parse(tags);
      targetNode.style.display = tagArray.some((tag) => newFilter.has(tag))
        ? ""
        : "none";
    });
  }
  recalculateFilter();
  inputs.forEach((input) => {
    input.onchange = recalculateFilter;
  });

  // Filter clear listener
  function clearFilters() {
    inputs.forEach((node) => {
      node.checked = false;
    });
    recalculateFilter();
  }
  if (clearAll) clearAll.onclick = clearFilters;

  // disable form submission things
  const form = document.getElementById("filter-control");
  form!.onsubmit = function (e) {
    e.preventDefault();
    return false;
  };

  // add scrollers
  const inner = document.querySelector<HTMLDivElement>(
    ".FilterControl_fields",
  )!;
  const leftFilter = document.querySelector<HTMLButtonElement>(
    "#filter-scroll-left",
  )!;
  const rightFilter = document.querySelector<HTMLButtonElement>(
    "#filter-scroll-right",
  )!;
  function onInnerScroll() {
    const { scrollLeft, clientWidth, scrollWidth } = inner;
    const scrollRight = scrollWidth - scrollLeft - clientWidth;
    leftFilter.disabled = scrollLeft < 10;
    rightFilter.disabled = scrollRight < 10;
  }
  onInnerScroll();
  inner.onscroll = onInnerScroll;
  window.onresize = onInnerScroll;
  leftFilter.onclick = function scrollLeft() {
    inner.scrollBy({ left: -300, behavior: "smooth" });
  };
  rightFilter.onclick = function scrollRight() {
    inner.scrollBy({ left: 300, behavior: "smooth" });
  };
</script>

<style lang="scss">
  .FilterControl {
    display: grid;
    grid-template:
      "head" auto
      "fields" auto / 1fr;
    align-items: center;
    font-size: 0.875rem;

    @media screen and (min-width: 768px) {
      grid-template: "head fields" auto / auto 1fr;
      padding: 0 var(--page-padding);
    }

    &_head {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: var(--page-padding);
      padding: var(--page-padding);
      padding-bottom: 0;

      @media screen and (min-width: 768px) {
        padding-bottom: var(--page-padding);
        margin-right: calc(-1 * var(--page-padding));
      }

      & h1 {
        opacity: 0.5;
      }
    }

    &_clear {
      text-transform: uppercase;

      &:disabled {
        pointer-events: none;
        opacity: 0.1;
        text-decoration: none;
      }
    }

    &_fields {
      position: relative;
      display: flex;
      align-items: center;
      flex: 1;
      overflow: scroll hidden;
      max-width: 100%;

      &:where(:has(input[type="checkbox"]:checked)) label {
        color: var(--clr-fg2);
      }
    }

    &_inner {
      display: flex;
      gap: 0.5rem;
      align-items: center;
      margin: 0 auto;
      height: 100%;
      padding: var(--page-padding) calc(0.5 * var(--page-padding));

      @media screen and (min-width: 768px) {
        margin-left: 0;
      }
    }

    &_button {
      position: sticky;
      left: 0;
      flex-shrink: 0;
      background: linear-gradient(to right, var(--clr-bg) 80%, transparent);
      padding: 1rem;
      z-index: 1;
      margin-right: -0.5rem;

      &:nth-of-type(2) {
        left: unset;
        right: 0;
        order: 3000;
        margin-right: unset;
        margin-left: -0.5rem;
        background: linear-gradient(to left, var(--clr-bg) 80%, transparent);
      }

      & button {
        display: block;
        width: 1.5em;
        height: 1.5em;
        background-color: var(--clr-fg);
        color: var(--clr-bg);
        border-radius: 100%;
        transition: background-color 0.3s ease-in-out;

        &:disabled {
          pointer-events: none;
          background-color: #f0f0f0;
        }
      }
    }

    & input[type="checkbox"] {
      position: absolute;
      left: -9999px;
      top: 0px;
    }

    & label {
      padding: 0.25em 0.5em;
      border: 1px solid transparent;
      cursor: pointer;
      white-space: nowrap;
      transition: opacity 0.2s ease-in-out;
    }

    & input[type="checkbox"]:focus-visible + label,
    & label:hover {
      outline: 3px solid var(--clr-hl);
    }

    & input[type="checkbox"]:checked + label {
      background-color: rgba(238, 238, 238, 1);
      color: var(--clr-fg);
    }
  }
</style>
