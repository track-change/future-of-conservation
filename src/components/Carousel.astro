---
import SanityPicture, { setSanityPictureDefaults } from "astro-sanity-picture";
import type { Artist } from "@/sanity";
import { imageBuilder } from "@/utils/imageBuilder";
import { resolveReference } from "@/utils/resolveLinks";

interface Props {
  id: string;
  carousel: NonNullable<Artist["introductionImages"]>;
}

setSanityPictureDefaults({ imageUrlBuilder: imageBuilder });

const { id = "carousel", carousel } = Astro.props;
---

<section id={id}>
  {
    carousel.map((picture, i) => {
      const img = resolveReference(picture.asset);
      return (
        <figure
          class:list={i == 0 ? "present" : []}
          id={`${id}-${i + 1}`}
          role="tabpanel"
        >
          <SanityPicture
            class="Picture"
            src={img}
            sizes="100vw, (min-width: 768px) 767px"
            img={{
              alt: picture.alt,
              style: {
                width: "100%",
                height: "100%",
                objectFit: "contain",
                objectPosition: "left bottom",
              },
            }}
            style={{
              backgroundSize: "contain",
              backgroundPosition: "center bottom",
              backgroundRepeat: "no-repeat",
            }}
          />
          <figcaption>{picture.caption}</figcaption>
        </figure>
      );
    })
  }
  {
    carousel.length > 1 && (
      <nav>
        <ol role="tablist">
          {carousel.map((_, i) => {
            return (
              <li>
                <button
                  role="tab"
                  aria-selected={i == 0}
                  aria-controls={`${id}-${i + 1}`}
                />
              </li>
            );
          })}
        </ol>
      </nav>
    )
  }
</section>

<script define:vars={{ id }}>
  let shownI = 0;
  const carousel = document.querySelector(`#${id}`);
  console.log(carousel);
  const images = carousel.querySelectorAll("figure");
  const buttons = carousel.querySelectorAll("button");
  function setImage(i, withFocus) {
    images[shownI].classList.remove("present");
    buttons[shownI].removeAttribute("aria-selected");
    shownI = (i + images.length) % images.length;
    images[shownI].classList.add("present");
    buttons[shownI].setAttribute("aria-selected", "true");
    if (withFocus) buttons[shownI].focus();
  }

  // attach listeners
  if (images.length > 1) {
    let autoPlay = true;
    images.forEach((image) => {
      image.querySelector("picture").onclick = () => {
        autoPlay = false;
        setImage(shownI + 1);
      };
    });
    buttons.forEach((button, i) => {
      button.onclick = () => {
        autoPlay = false;
        setImage(i);
      };
      button.onkeydown = (e) => {
        autoPlay = false;
        if (e.key == "ArrowRight") {
          setImage(i + 1, true);
        } else if (e.key == "ArrowLeft") {
          setImage(i - 1, true);
        }
      };
    });

    // auto-move through until interacted with
    function nextAutoPlay() {
      if (!autoPlay) return;
      setImage(shownI + 1);
      window.setTimeout(nextAutoPlay, 4000);
    }
    setTimeout(nextAutoPlay, 4000);
  }
</script>

<style lang="scss">
  section {
    position: relative;
    width: 100%;
    margin: 3rem 0;
    display: grid;
    grid-template: "pic nav" 1fr / 1fr auto;
  }

  figure {
    grid-area: pic;
    display: flex;
    flex-direction: column;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    pointer-events: none;

    &.present {
      opacity: 1;
      pointer-events: all;
    }
  }

  figcaption {
    margin-top: 0.5rem;
    font-size: 1rem;
    line-height: 1.25;
  }

  .Picture {
    width: 100%;
    aspect-ratio: 4/3;
    cursor: pointer;

    & img {
      object-fit: contain;
      object-position: center;
    }
  }

  nav {
    grid-area: nav;
    align-self: center;
    margin-left: 1.5rem;

    @media screen and (min-width: 800px) {
      position: absolute;
      left: 100%;
    }
  }

  ol {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  li {
    display: flex;
  }

  button {
    border-radius: 100%;
    background-color: var(--clr-fg);
    width: 0.75rem;
    height: 0.75rem;
    opacity: 0.2;

    &[aria-selected="true"] {
      opacity: 1;
    }
  }
</style>
