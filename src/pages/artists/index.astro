---
import RootLayout from "@/layouts/RootLayout.astro";
import type { Tag } from "@/sanity";
import {
  localizedQuery,
  artistsQuery,
  type ArtistsQueryType,
} from "@/queries/contentQueries";
import Link from "@/components/Link.astro";
import FilterGridControls from "@/components/FilterGridControls.astro";
import { resolveReference } from "@/utils/resolveLinks";

const artists = await localizedQuery<ArtistsQueryType>(Astro)(artistsQuery);
const possibleTags = artists
  .flatMap(({ tags }) => tags || [])
  .filter((x) => !!x)
  .map((x) => resolveReference(x));
---

<RootLayout>
  <FilterGridControls tags={possibleTags} ariaControls="artists">
    <section class="Artists" aria-label="Artists">
      <ul id="artists" class="Artists_list grid">
        {
          artists.map((artist) => (
            <li
              class="filter-target"
              data-tags={`[${
                artist.tags
                  ?.map(resolveReference)
                  .map(({ slug }) => `"${slug.current}"`)
                  .join(",") || ""
              }]`}
            >
              <h2 lang={artist.titleLang}>
                <Link link={artist} data-astro-prefetch="viewport" />
              </h2>
              {artist.tags?.length ? (
                <ul class="Artists_tags">
                  {artist.tags
                    ?.map(resolveReference)
                    .map(
                      ({ title, titleLang }: Tag & { titleLang?: string }) => (
                        <li lang={titleLang}>{title}</li>
                      ),
                    )}
                </ul>
              ) : undefined}
            </li>
          ))
        }
      </ul>
    </section>
  </FilterGridControls>
</RootLayout>

<style lang="scss" is:global>
  .Artists {
    min-height: 60vh;
    width: 100%;
    overflow-x: hidden;

    &_list {
      display: grid;
      grid-template-columns: 1fr;

      @media screen and (min-width: 768px) {
        grid-template-columns: repeat(2, 1fr);
      }

      & > li {
        display: flex;
        flex-direction: column;
        gap: var(--page-padding);
        min-height: 24vw;
        padding: 3rem 1rem;
        position: relative;
        align-items: center;
        justify-content: center;
        z-index: 0;

        @media screen and (min-width: 768px) {
          min-height: 12vw;
        }

        & > h2 {
          text-align: center;
        }

        & > h2 > a {
          font-size: 8vw;
          text-transform: uppercase;
          text-align: center;
          @media screen and (min-width: 768px) {
            font-size: 4vw;
          }

          &:hover::before,
          &:focus-visible::before {
            background-color: var(--clr-hl);
          }

          &::before {
            content: "";
            position: absolute;
            inset: 0;
            z-index: -1;
          }
        }
      }
    }

    &_tags {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
      pointer-events: none;
      max-width: 30rem;
      gap: calc(0.5 * var(--page-padding));

      & > li {
        padding: 0.25rem 0.5rem;
        background-color: rgba(238, 238, 238, 1);
      }
    }
  }
</style>
