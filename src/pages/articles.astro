---
import Link from "@/components/Link.astro";
import RootLayout from "@/layouts/RootLayout.astro";
import {
  localizedQuery,
  articlesQuery,
  type ArticlesQueryType,
  pageArticlesQuery,
} from "@/queries/contentQueries";
import SearchGridControls from "@/components/GridControlsSearch.astro";
import { resolveReference } from "@/utils/resolveLinks";
import type { PageArticles } from "@/sanity";

const articlesPage =
  await localizedQuery<PageArticles>(Astro)(pageArticlesQuery);
const articles = await localizedQuery<ArticlesQueryType>(Astro)(articlesQuery);
---

<RootLayout pageTitle={articlesPage.title} pageSeo={articlesPage.seo}>
  <SearchGridControls ariaControls="articles">
    <section class="Articles">
      <h1 class="sr-only">{articlesPage.title}</h1>
      <ol
        id="articles"
        class="grid search-container"
        aria-live="polite"
        aria-atomic="true"
      >
        {
          articles.map((article, i) => (
            <li
              class="search-target"
              id={article._id}
              data-search-keywords={article.searchKeywords}
            >
              <article class="Article central-column">
                <div>{(i + 1).toString().padStart(2, "0")}</div>
                <h2 class="h1 legible" lang={article.titleLang}>
                  <Link
                    link={article}
                    target="_blank"
                    class="hoverable_before"
                    rel="noopener noreferrer"
                  >
                    {article.title}
                  </Link>
                </h2>
                <p
                  class="byline display-type"
                  lang={
                    article.isExternalAuthor
                      ? article.authorExternalLang
                      : article.author
                        ? (resolveReference(article.author) as any).titleLang
                        : undefined
                  }
                >
                  {article.isExternalAuthor
                    ? article.authorExternal
                    : article.author
                      ? resolveReference(article.author).title
                      : undefined}
                </p>
                <p>VIEW PDF</p>
              </article>
            </li>
          ))
        }
      </ol>
    </section>
  </SearchGridControls>
</RootLayout>

<style lang="scss" is:global>
  .Articles {
    min-height: 60vh;
    width: 100%;
    overflow-x: hidden;

    & > ol {
      display: flex;
      flex-direction: column;

      & > li {
        padding: calc(0.75 * var(--page-padding)) 0;
        position: relative;
        z-index: 0;
      }
    }
  }

  .Article {
    display: grid;
    grid-template:
      "num title" auto
      "author author" auto
      "type type" auto / auto 1fr;
    column-gap: calc(0.5 * var(--page-padding));
    row-gap: calc(2 * var(--page-padding));

    @media screen and (min-width: 768px) {
      column-gap: var(--page-padding);
    }

    & > div {
      grid-area: num;
      font-size: 0.875rem;
    }

    & > h2 {
      grid-area: title;
      font-size: clamp(2rem, 8vw, 3.75rem);

      & a {
        display: block;

        &::before {
          content: "";
          position: absolute;
          inset: 0;
          z-index: -1;
        }

        &::after {
          content: "";
          position: absolute;
          inset: 0;
          z-index: 1;
        }
      }
    }

    & > p.byline {
      grid-area: author;
      text-transform: uppercase;
      text-align: center;
      font-size: clamp(2rem, 8vw, 3.75rem);
    }

    & > p:not(.byline) {
      grid-area: type;
      text-align: center;
      font-size: 0.875rem;

      &[data-search-keywords] {
        display: none;
      }
    }
  }
</style>
